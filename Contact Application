package com.alekha.modular;

import java.util.ArrayList;

public class Contacts {
	private String name;
	private String phoneNumber;
	private String email;
	
	public Contacts(String name,String phoneNumber,String email) {
		this.name = name;
		this.phoneNumber = phoneNumber;
		this.email = email;
	}
	public String getEmail() {
		return email;
	}

	
	public String getName() {
		return name;
	}
 
	public String getPhoneNumber() {
		return phoneNumber;
	}
	
	public static Contacts createContact(String name,String phoneNumber,String email) {
		return new Contacts(name,phoneNumber,email);
	}
	
	public static Contacts updateContact(String name, String phoneNumber,String email) {
		return new Contacts(name,phoneNumber,email);
	}
	
 
}

package com.alekha.modular;

import java.util.ArrayList;
import java.util.Iterator;

public class MobilePhone {
	 ArrayList<Contacts> myContacts = new ArrayList<Contacts>();
	
		/*
		 * public MobilePhone() { this.myContacts = new ArrayList<Contacts>(); }
		 */
	
	public boolean addNewContact(Contacts contact) {
		if(findContact(contact.getName()) >= 0) {
			System.out.println("Name is already added");
		}
		else if(findPhone(contact.getPhoneNumber())>= 0) {
			System.out.println("PhoneNumber is already added");
		}
		myContacts.add(contact);
		return true;
	}
	
	public boolean updateContact(Contacts oldContact , Contacts newContact) {
		int foundPosition = findContact(oldContact);
		if(foundPosition < 0) {
			return false;
		}
		
		this.myContacts.set(foundPosition, newContact);
		System.out.println(newContact.getName());
		return true;
	}
	
	public boolean removeContact(Contacts contact) {
		int foundPosition = findContact(contact);
		if(foundPosition < 0) {
			return false;
		}
		this.myContacts.remove(foundPosition);
		return true;
	}

	private int findContact(Contacts contact) {
		return this.myContacts.indexOf(contact);
	}
	
	private int findContact(String contactName) {
		 for(int i =0; i < myContacts.size(); i++) {
			 Contacts contacts = this.myContacts.get(i);
			 if(contacts.getName().equals(contactName)) {
				 return i;
			 }
		 }
		 return -1;
	}
	private int findPhone(String contactPhoneNumber) {
		 for(int i =0; i < myContacts.size(); i++) {
			 Contacts contacts = this.myContacts.get(i);
			 if(contacts.getPhoneNumber().equals(contactPhoneNumber)) {
				 return i;
			 }
		 }
		 return -1;
	}
	
	/*
	 * public String queryContact(Contacts contact) { if(findContact(contact) >= 0)
	 * { return contact.getName(); } return null; }
	 */
	
	public Contacts checkContact(String name) {
		int position = findContact(name);
		if(position >=0) {
			return this.myContacts.get(position);
		}
		return null;
	}
	
	
	public void displayContacts() {
		System.out.println("Contact list");
		Iterator<Contacts> itr = myContacts.iterator();
		while(itr.hasNext()) {
		Contacts b = itr.next();
		System.out.println(b.getName());
		System.out.println(b.getPhoneNumber());
		System.out.println(b.getEmail());
		
		System.out.println(" ");
		}
	}
}
 

package com.alekha.modular;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
	static MobilePhone mp = new MobilePhone();
	static BufferedReader sc = new BufferedReader(new InputStreamReader(System.in));
	public static void main(String[] args) throws IOException {	
		int choice =0;
		
		 do {
			 System.out.println("_____Contact Details______");
				System.out.println("1: Add a new contact");
				System.out.println("2: Update contact");
				System.out.println("3: Remove the contact");
				System.out.println("4: Display the contact");
			choice = Integer.parseInt(sc.readLine());
			
			switch (choice) {
			case 1:
				addNewContact();
				break;
				
			case 2:
				updateContact();
				break;
			case 3:
				removeContact();
				break;
			case 4:
				mp.displayContacts();
				break;
			default: 
				System.out.println("None of these");
 
			 
			}
		 }
			while(choice !=5);
				
	}

	private static void addNewContact() throws IOException {

		String name = sc.readLine();
		String phone = sc.readLine();
		String email = sc.readLine();
		Contacts newContact = Contacts.createContact(name, phone, email);
		if (mp.addNewContact(newContact)) {
			System.out.println("name = "+ name + "  "+ " phone = " + phone + "  "+ " Email = "+ email);
		} else {
			System.out.println("Can't add,  already on file");
		}
	}
	
	private static void updateContact() throws IOException {
		String name = sc.readLine();
		Contacts extContact = mp.checkContact(name);
		if(extContact == null) 
		{
			System.out.println("Cannot found contact");
			return;
		}
		String newName = sc.readLine();
		String newNumber = sc.readLine();
		String email = sc.readLine();
		Contacts newContact = Contacts.updateContact(newName, newNumber,email);
		if(mp.updateContact(extContact, newContact)) 
		{
			System.out.println("Successfully updated");
		}else {
			System.out.println("Error Updating Contact");
		}
	}
	
	private static void removeContact() throws IOException {
		String name = sc.readLine();
		Contacts exContact = mp.checkContact(name);
		if(exContact == null) 
		{
			System.out.println("Cannot found contact");
			return;
		}
		
		if(mp.removeContact(exContact)) {
			System.out.println("Successfully deleted");
		}else {
			System.out.println("Error Deleting Contact");
		}
	}
}
	

	
